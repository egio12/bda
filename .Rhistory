gruppo = factor(rep(1:length(vettori), sapply(vettori, length)))
)
} else {
# Input: formula e dataframe
if (is.null(data)) {
stop("Se viene fornita una formula, è necessario fornire anche il dataframe 'data'.")
}
# Verifica se la formula è valida
if (!inherits(formula, "formula")) {
stop("L'argomento 'formula' deve essere una formula valida.")
}
# Estrai i nomi delle variabili dalla formula
var_risposta <- all.vars(formula)[1]
var_gruppo <- all.vars(formula)[2]
# Verifica se le variabili esistono nel dataframe
if (!all(c(var_risposta, var_gruppo) %in% names(data))) {
stop("Le variabili specificate nella formula non esistono nel dataframe.")
}
# Verifica se la variabile di risposta è numerica
if (!is.numeric(data[[var_risposta]])) {
stop("La variabile di risposta deve essere numerica.")
}
# Verifica se la variabile di gruppo è un fattore
if (!is.factor(data[[var_gruppo]])) {
data[[var_gruppo]] <- as.factor(data[[var_gruppo]])
warning(paste("La variabile", var_gruppo, "è stata convertita in fattore."))
}
# Assegna il dataframe per l'ANOVA
dati_anova <- data
}
# Verifica delle ipotesi di validità dell'ANOVA
cat("\nVerifica delle ipotesi di validità dell'ANOVA:\n")
# 1. Normalità dei residui
modello_nullo <- lm(valore ~ 1, data = dati_anova)
residui <- residuals(modello_nullo)
test_normalita <- shapiro.test(residui)
if (test_normalita$p.value < 0.05) {
cat("- Normalità dei residui: NON SODDISFATTA (p-value =", test_normalita$p.value, ")\n")
} else {
cat("- Normalità dei residui: soddisfatta\n")
}
# 2. Omogeneità delle varianze (test di Levene)
test_levene <- leveneTest(valore ~ gruppo, data = dati_anova)
if (test_levene$`Pr(>F)`[1] < 0.05) {
cat("- Omogeneità delle varianze: NON SODDISFATTA (p-value =", test_levene$`Pr(>F)`[1], ")\n")
} else {
cat("- Omogeneità delle varianze: soddisfatta\n")
}
# Esecuzione dell'ANOVA
if (is.null(formula)) {
modello_anova <- aov(valore ~ gruppo, data = dati_anova)
} else {
modello_anova <- aov(formula, data = dati_anova)
}
risultati_anova <- summary(modello_anova)
# Estrazione dei risultati
f_stat <- risultati_anova[[1]][["F value"]][1]
p_value <- risultati_anova[[1]][["Pr(>F)"]][1]
# Decisione statistica
if (p_value < 0.05) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Output formattato
cat("\nRisultati dell'ANOVA:\n")
cat("--------------------\n")
cat("Statistica F:", f_stat, "\n")
cat("P-value:", p_value, "\n")
cat("Decisione:", decisione, "\n")
}
library(BDA)
bda_anova <- function(...) {
# Cattura i vettori passati come argomenti
vettori <- list(...)
# Controlla se tutti gli argomenti sono vettori numerici
if (!all(sapply(vettori, is.numeric))) {
stop("Tutti gli argomenti devono essere vettori numerici.")
}
# Verifica delle ipotesi di validità dell'ANOVA
cat("\nVerifica delle ipotesi di validità dell'ANOVA:\n")
# 1. Normalità dei residui
residui <- unlist(vettori) - rep(sapply(vettori, mean), sapply(vettori, length))
test_normalita <- shapiro.test(residui)
if (test_normalita$p.value < 0.05) {
cat("- Normalità dei residui: NON SODDISFATTA (p-value =", test_normalita$p.value, ")\n")
} else {
cat("- Normalità dei residui: soddisfatta\n")
}
# 2. Omogeneità delle varianze (test di Bartlett)
test_bartlett <- bartlett.test(vettori)
if (test_bartlett$p.value < 0.05) {
cat("- Omogeneità delle varianze: NON SODDISFATTA (p-value =", test_bartlett$p.value, ")\n")
} else {
cat("- Omogeneità delle varianze: soddisfatta\n")
}
# Esecuzione dell'ANOVA (anche se le ipotesi non sono soddisfatte)
dati_anova <- data.frame(valore = unlist(vettori), gruppo = factor(rep(1:length(vettori), sapply(vettori, length))))
modello_anova <- aov(valore ~ gruppo, data = dati_anova)
risultati_anova <- summary(modello_anova)
# Estrazione dei risultati
f_stat <- risultati_anova[[1]][["F value"]][1]
p_value <- risultati_anova[[1]][["Pr(>F)"]][1]
# Decisione statistica
if (p_value < 0.05) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Output formattato
cat("\nRisultati dell'ANOVA:\n")
cat("--------------------\n")
cat("Statistica F:", f_stat, "\n")
cat("P-value:", p_value, "\n")
cat("Decisione:", decisione, "\n")
}
bda_anova <- function(formula, data, alpha = 0.05) {
# Verifica se l'input è un dataframe
if (!is.data.frame(data)) {
stop("L'input 'data' deve essere un dataframe.")
}
# Verifica delle ipotesi di validità dell'ANOVA
cat("\nVerifica delle ipotesi di validità dell'ANOVA:\n")
# 1. Normalità dei residui
modello_anova <- aov(formula, data = data)
residui <- residuals(modello_anova)
test_normalita <- shapiro.test(residui)
if (test_normalita$p.value < alpha) {
cat("- Normalità dei residui: NON SODDISFATTA (p-value =", test_normalita$p.value, ")\n")
} else {
cat("- Normalità dei residui: soddisfatta\n")
}
# 2. Omogeneità delle varianze (test di Bartlett)
test_bartlett <- bartlett.test(formula, data = data)
if (test_bartlett$p.value < alpha) {
cat("- Omogeneità delle varianze: NON SODDISFATTA (p-value =", test_bartlett$p.value, ")\n")
} else {
cat("- Omogeneità delle varianze: soddisfatta\n")
}
# Esecuzione dell'ANOVA
risultati_anova <- summary(modello_anova)
# Estrazione dei risultati
f_stat <- risultati_anova[[1]][["F value"]][1]
p_value <- risultati_anova[[1]][["Pr(>F)"]][1]
# Decisione statistica
if (p_value < alpha) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Output formattato
cat("\nRisultati dell'ANOVA:\n")
cat("--------------------\n")
cat("Statistica F:", f_stat, "\n")
cat("P-value:", p_value, "\n")
cat("Decisione:", decisione, "\n")
}
library(BDA)
library(BDA)
library(BDA)
# Funzione per il T-test con valori medi e varianze note (gruppi 0 e 1)
bda_t_test <- function(x0, x1, n0, n1, s0, s1, alpha, tipo_test) {
# Calcolo della varianza pooled
s_p <- sqrt(((n0 - 1) * s0 + (n1 - 1) * s1) / (n0 + n1 - 2))
# Calcolo della statistica t
t_stat <- (x1 - x0) / (s_p * sqrt(1/n0 + 1/n1))
# Calcolo del p-value in base al tipo di test
if (tipo_test == "bilatero") {
p_value <- 2 * (1 - pt(abs(t_stat), df = n0 + n1 - 2))
} else if (tipo_test == "sinistro") {
p_value <- pt(t_stat, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
p_value <- pt(t_stat, df = n0 + n1 - 2, lower.tail = FALSE)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Calcolo del quantile di riferimento in base al tipo di test
if (tipo_test == "bilatero") {
quantile_rif <- qt(1 - alpha/2, df = n0 + n1 - 2)
} else if (tipo_test == "sinistro") {
quantile_rif <- qt(alpha, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
quantile_rif <- qt(1 - alpha, df = n0 + n1 - 2)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Decisione statistica
if (p_value < alpha) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Output formattato
cat("Risultati del T-test (Gruppo 0 vs. Gruppo 1):\n")
cat("--------------------------------------------\n")
cat("Statistica t:", t_stat, "\n")
cat("P-value:", p_value, "\n")
cat("Quantile di riferimento (alpha =", alpha, "):", quantile_rif, "\n")
cat("Decisione:", decisione, "\n")
}
library(BDA)
# Funzione per il T-test con valori medi e varianze note (gruppi 0 e 1)
bda_t_test <- function(x0, x1, n0, n1, s0, s1, alpha = 0.05 , tipo_test) {
# Calcolo della varianza pooled
s_p <- sqrt(((n0 - 1) * s0 + (n1 - 1) * s1) / (n0 + n1 - 2))
# Calcolo della statistica t
t_stat <- (x1 - x0) / (s_p * sqrt(1/n0 + 1/n1))
# Calcolo del p-value in base al tipo di test
if (tipo_test == "bilatero") {
p_value <- 2 * (1 - pt(abs(t_stat), df = n0 + n1 - 2))
} else if (tipo_test == "sinistro") {
p_value <- pt(t_stat, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
p_value <- pt(t_stat, df = n0 + n1 - 2, lower.tail = FALSE)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Calcolo del quantile di riferimento in base al tipo di test
if (tipo_test == "bilatero") {
quantile_rif <- qt(1 - alpha/2, df = n0 + n1 - 2)
} else if (tipo_test == "sinistro") {
quantile_rif <- qt(alpha, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
quantile_rif <- qt(1 - alpha, df = n0 + n1 - 2)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Decisione statistica
if (p_value < alpha) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Output formattato
cat("Risultati del T-test (Gruppo 0 vs. Gruppo 1):\n")
cat("--------------------------------------------\n")
cat("Statistica t:", t_stat, "\n")
cat("P-value:", p_value, "\n")
cat("Quantile di riferimento (alpha =", alpha, "):", quantile_rif, "\n")
cat("Decisione:", decisione, "\n")
}
library(BDA)
bda_valuta_ipotesi <- function(p_value, alpha = 0.05) {
cat("\n")
cat("**************************************************\n")
cat("*                Valutazione Ipotesi              *\n")
cat("**************************************************\n\n")
cat("Livello di significatività (alpha):", alpha, "\n")
cat("P-value:", p_value, "\n\n")
if (p_value < alpha) {
cat("Conclusione:\n")
cat("    Rifiutiamo l'ipotesi nulla (H0)\n")
cat("    Accettiamo l'ipotesi alternativa (H1)\n\n")
} else {
cat("Conclusione:\n")
cat("    Non possiamo rifiutare l'ipotesi nulla (H0)\n")
cat("    Non abbiamo evidenza sufficiente per accettare H1\n\n")
}
cat("**************************************************\n")
}
bda_valuta_ipotesi <- function(p_value, alpha = 0.05) {
cat("\n")
cat("**************************************************\n")
cat("*                Valutazione Ipotesi              *\n")
cat("**************************************************\n\n")
cat("Livello di significatività (alpha):", alpha, "\n")
cat("P-value:", p_value, "\n\n")
if (p_value < alpha) {
cat("Conclusione:\n")
cat("    Rifiutiamo l'ipotesi nulla (H0)\n")
cat("    Accettiamo l'ipotesi alternativa (H1)\n\n")
} else {
cat("Conclusione:\n")
cat("    Non possiamo rifiutare l'ipotesi nulla (H0)\n")
cat("    Non abbiamo evidenza sufficiente per accettare H1\n\n")
}
cat("**************************************************\n")
}
library(BDA)
library(BDA)
library(BDA)
bda_NE_ATT_ATU_ATE <- function() {
# Input dati utente (con formattazione)
cat("\n\n")
cat("---------------------------------------------\n")
cat("    Inserisci i dati per il calcolo degli effetti causali\n")
cat("---------------------------------------------\n\n")
# Gruppo non trattato
cat("Gruppo NON trattato:\n")
y0_non_trattato <- as.numeric(readline(prompt = "  Outcome SENZA trattamento (Y0): "))
y1_non_trattato <- as.numeric(readline(prompt = "  Outcome CON trattamento (Y1): "))
perc_non_trattato <- as.numeric(readline(prompt = "  Percentuale di individui NON trattati (%): ")) / 100
# Gruppo trattato
cat("\nGruppo trattato:\n")
y0_trattato <- as.numeric(readline(prompt = "  Outcome SENZA trattamento (Y0): "))
y1_trattato <- as.numeric(readline(prompt = "  Outcome CON trattamento (Y1): "))
perc_trattato <- 1 - perc_non_trattato
# Calcolo degli indicatori
NE <- y1_trattato - y0_non_trattato
ATT <- y1_trattato - y0_trattato
ATU <- y1_non_trattato - y0_non_trattato
ATE <- perc_trattato * ATT + perc_non_trattato * ATU
# Output formattato (con colori e spaziatura)
cat("\n\n")
cat("\033[1;34m*********************************************\033[0m\n")
cat("\033[1;34m*         Effetti Causali del Trattamento        *\033[0m\n")
cat("\033[1;34m*********************************************\033[0m\n\n")
cat("  NE (Average Treatment Effect):", round(NE, 3), "\n")
cat("     Formula: E(Y1 | D = 1) - E(Y0 | D = 0)\n\n")
cat("  ATT (Average Treatment Effect on the Treated):", round(ATT, 3), "\n")
cat("     Formula: E(Y1 | D = 1) - E(Y0 | D = 1)\n\n")
cat("  ATU (Average Treatment Effect on the Untreated):", round(ATU, 3), "\n")
cat("     Formula: E(Y1 | D = 0) - E(Y0 | D = 0)\n\n")
cat("  ATE (Average Treatment Effect):", round(ATE, 3), "\n")
cat("     Formula: p * ATT + (1 - p) * ATU\n\n")
cat("\033[1;34m*********************************************\033[0m\n")
}
library(BDA)
bda_NE_ATT_ATU_ATE <- function() {
# Input dati utente (con formattazione)
cat("\n\n")
cat("---------------------------------------------\n")
cat("    Inserisci i dati per il calcolo degli effetti causali\n")
cat("---------------------------------------------\n\n")
# Gruppo non trattato
cat("Gruppo NON trattato:\n")
y0_non_trattato <- as.numeric(readline(prompt = "  Outcome SENZA trattamento (Y0): "))
y1_non_trattato <- as.numeric(readline(prompt = "  Outcome CON trattamento (Y1): "))
perc_non_trattato <- as.numeric(readline(prompt = "  Percentuale di individui NON trattati (%): ")) / 100
# Gruppo trattato
cat("\nGruppo trattato:\n")
y0_trattato <- as.numeric(readline(prompt = "  Outcome SENZA trattamento (Y0): "))
y1_trattato <- as.numeric(readline(prompt = "  Outcome CON trattamento (Y1): "))
perc_trattato <- 1 - perc_non_trattato
# Calcolo degli indicatori
NE <- y1_trattato - y0_non_trattato
ATT <- y1_trattato - y0_trattato
ATU <- y1_non_trattato - y0_non_trattato
ATE <- perc_trattato * ATT + perc_non_trattato * ATU
BIAS <- y0_trattato - y0_non_trattato  # Calcolo del BIAS
# Output formattato (con colori e spaziatura)
cat("\n\n")
cat("\033[1;34m*********************************************\033[0m\n")
cat("\033[1;34m*         Effetti Causali del Trattamento        *\033[0m\n")
cat("\033[1;34m*********************************************\033[0m\n\n")
cat("  NE (Average Treatment Effect):", round(NE, 3), "\n")
cat("     Formula: E(Y1 | D = 1) - E(Y0 | D = 0)\n\n")
cat("  ATT (Average Treatment Effect on the Treated):", round(ATT, 3), "\n")
cat("     Formula: E(Y1 | D = 1) - E(Y0 | D = 1)\n\n")
cat("  ATU (Average Treatment Effect on the Untreated):", round(ATU, 3), "\n")
cat("     Formula: E(Y1 | D = 0) - E(Y0 | D = 0)\n\n")
cat("  ATE (Average Treatment Effect):", round(ATE, 3), "\n")
cat("     Formula: p * ATT + (1 - p) * ATU\n\n")
cat("  BIAS (Selection Bias):", round(BIAS, 3), "\n")
cat("     Formula: E(Y0 | D = 1) - E(Y0 | D = 0)\n\n")
cat("\033[1;34m*********************************************\033[0m\n")
}
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
library(BDA)
cat("Varianza pooled:", s_p, "\n")
cat("Decisione:", decisione, "\n\n")
bda_t.test_valori_noti <- function(x0, x1, n0, n1, s0, s1, alpha = 0.05, tipo_test = "bilatero") {
# Calcolo della varianza pooled
s_p <- sqrt(((n0 - 1) * s0 + (n1 - 1) * s1) / (n0 + n1 - 2))
# Calcolo della statistica t
t_stat <- (x1 - x0) / (s_p * sqrt(1/n0 + 1/n1))
# Calcolo del p-value in base al tipo di test
if (tipo_test == "bilatero") {
p_value <- 2 * (1 - pt(abs(t_stat), df = n0 + n1 - 2))
} else if (tipo_test == "sinistro") {
p_value <- pt(t_stat, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
p_value <- pt(t_stat, df = n0 + n1 - 2, lower.tail = FALSE)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Calcolo del quantile di riferimento in base al tipo di test
if (tipo_test == "bilatero") {
quantile_rif <- qt(1 - alpha/2, df = n0 + n1 - 2)
} else if (tipo_test == "sinistro") {
quantile_rif <- qt(alpha, df = n0 + n1 - 2)
} else if (tipo_test == "destro") {
quantile_rif <- qt(1 - alpha, df = n0 + n1 - 2)
} else {
stop("Tipo di test non valido. Scegliere tra 'bilatero', 'sinistro' o 'destro'.")
}
# Decisione statistica
if (p_value < alpha) {
decisione <- "Rifiuto H0, Accetto H1"
} else {
decisione <- "Non rifiuto H0"
}
# Descrizione del tipo di test
tipo_test_descrizione <- switch(tipo_test,
"bilatero" = "m1 ≠ m0",
"sinistro" = "m1 < m0",
"destro" = "m1 > m0")
# Output formattato
cat("\n")
cat("Risultati del T-Test (Gruppo 0 vs. Gruppo 1)\n")
cat("--------------------------------------------\n")
cat("Varianze uguali: Sì\n")
cat("Tipo di test:", tipo_test_descrizione, "\n")
cat("Statistica t:", t_stat, "\n")
cat("Gradi di libertà:", n0 + n1 - 2, "\n")
cat("P-value:", p_value, "\n")
cat("Quantile di riferimento (alpha =", alpha, "):", quantile_rif, "\n")
cat("Varianza pooled:", s_p, "\n")
cat("Decisione:", decisione, "\n\n")
}
library(rdrobust)
library(rdd)
library(ggplot2)
detach("package:BDA", unload = TRUE)
R CMD build
CMD build
library(rdrobust)
library(ggplot2)
# Funzione per creare il DAG e trovare i set di variabili da controllare
bda_dag_var_da_controllare <- function(dag) {
# Calcolo dei set di variabili da controllare
sets <- adjustmentSets(dag)
# Output dei set di variabili da controllare in italiano
cat("Set di variabili da controllare:\n")
for (i in seq_along(sets)) {
cat("Set", i, ":", paste(sets[[i]], collapse = ", "), "\n")
}
# Calcolo dei biasing paths
paths <- paths(dag, from = "t", to = "y", direct = FALSE)
open_paths <- lapply(paths, function(path) paste(path, collapse = " → "))
# Output dei biasing paths
cat("\nBiasing paths that are open:\n")
for (i in seq_along(open_paths)) {
cat("Path", i, ":", open_paths[[i]], "\n")
}
# Plot del DAG con colori specificati e sfondo nero
p <- ggdag(dag) +
theme_dag() +
geom_dag_point(aes(color = ifelse(name == "t", "Trattamento",
ifelse(name == "y", "Outcome",
ifelse(name == "x5", "Variabile Non osservabile", "Altre variabili"))))) +
scale_color_manual(values = c("Trattamento" = "green",
"Outcome" = "red",
"Variabile Non osservabile" = "blue",
"Altre variabili" = "black")) +
geom_dag_text(color = "white") +
theme(panel.background = element_rect(fill = "black", color = "black"),
plot.background = element_rect(fill = "black", color = "black"),
legend.background = element_rect(fill = "black", color = "black"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
plot.title = element_text(color = "white"),
plot.caption = element_text(color = "white")) +
labs(color = "Legenda")
print(p)
# Plot per ogni biasing path
for (i in seq_along(paths)) {
path_edges <- paths[[i]]
cat("\nPath", i, ":", open_paths[[i]], "\n")
dag_path <- dagitty(paste0('dag {', paste(path_edges, collapse = ' -> '), '}'))
p_path <- ggdag(dag_path) +
theme_dag() +
geom_dag_point(color = "white") +
geom_dag_text(color = "white") +
theme(panel.background = element_rect(fill = "black", color = "black"),
plot.background = element_rect(fill = "black", color = "black"),
legend.background = element_rect(fill = "black", color = "black"),
legend.text = element_text(color = "white"),
legend.title = element_text(color = "white"),
plot.title = element_text(color = "white"),
plot.caption = element_text(color = "white"))
print(p_path)
}
}
# Output dei Collider
#Estraggo i collider
colliders = node_collider(dag)$data[node_collider(dag)$data$colliders == "Collider", "name"]$name
#Stampo i collider
cat("\nCollider presenti nel DAG:\n")
# Plot del DAG
p <- ggdag(dag) +
theme_dag() +
#Coloro i nodi trattamento (trattamenti) di verde, outcomes di rosso e latents di blu                                  ifelse(name == "x5", "Variabile Non osservabile", "Altre variabili"))))) +
geom_dag_point(aes(color = ifelse(name %in% trattamenti, "Trattamento",
ifelse(name %in% outcomes, "Outcome",
ifelse(name %in% latents, "Variabile Non osservabile", "Altre variabili"))))) +
scale_color_manual(values = c("Trattamento" = "green",
"Outcome" = "red",
"Variabile Non osservabile" = "blue",
"Altre variabili" = "black")) +
geom_dag_text(color = "white") +
theme(panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white"),
legend.background = element_rect(fill = "white", color = "white"),
legend.text = element_text(color = "black"),
legend.title = element_text(color = "black"),
plot.title = element_text(color = "black"),
plot.caption = element_text(color = "black")) +
labs(color = "Legenda")
install.packages("pROC")
install.packages("PRROC")
